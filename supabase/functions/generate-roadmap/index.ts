import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { corsHeaders } from '../_shared/cors.ts'

// --- Gemini API Configuration ---
// IMPORTANT: Store your Gemini API Key securely as a Supabase Secret:
// Go to Project Settings > Edge Functions > Add new secret > Name: GEMINI_API_KEY, Value: your_api_key
const GEMINI_API_KEY = Deno.env.get("GEMINI_API_KEY");
// Choose the appropriate Gemini model
const GEMINI_MODEL = "gemini-1.5-flash-latest"; // Or another suitable model
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent?key=${GEMINI_API_KEY}`;

// --- Helper: Improved Response Parsing ---
function parseGeminiResponse(text: string): { title: string, description: string, steps: any[] } {
  try {
    console.log("Attempting to parse response text:", text);
    
    // Check if response is JSON
    try {
      const jsonMatch = text.match(/```json\n([\s\S]*?)\n```/) || text.match(/```\n([\s\S]*?)\n```/);
      if (jsonMatch && jsonMatch[1]) {
        const jsonContent = jsonMatch[1];
        const parsedJson = JSON.parse(jsonContent);
        
        // If we have a valid JSON with expected structure
        if (parsedJson.steps && Array.isArray(parsedJson.steps)) {
          console.log("Successfully parsed JSON response");
          return {
            title: parsedJson.title || "AI Generated Roadmap",
            description: parsedJson.description || "A learning roadmap created with AI assistance.",
            steps: parsedJson.steps.map((step, index) => ({
              ...step,
              order_index: index,
              // Ensure required fields exist
              title: step.title || `Step ${index + 1}`,
              description: step.description || "Complete this step of your learning journey.",
              estimated_time: step.estimated_time || "1-2 hours",
              keywords: step.keywords || []
            }))
          };
        }
      }
    } catch (jsonError) {
      console.log("Not a valid JSON response, falling back to text parsing");
    }
    
    // Text-based parsing
    const lines = text.split('\n').map(l => l.trim()).filter(Boolean);
    let title = "AI Generated Roadmap";
    let description = "A roadmap generated by AI.";
    const steps: any[] = [];
    let currentStep: any = null;
    let stepIndex = 0;
    let inDescriptionMode = false;

    // Try to extract title and description if they are formatted clearly
    if (lines[0] && !lines[0].toLowerCase().startsWith('step') && !lines[0].match(/^\d+[\.\:]/)) {
      title = lines.shift() || title;
      
      // The next non-empty line is likely the description
      if (lines[0] && !lines[0].toLowerCase().startsWith('step') && !lines[0].match(/^\d+[\.\:]/)) {
        description = lines.shift() || description;
        
        // Continue adding lines to description until we hit what looks like a step
        while (lines[0] && !lines[0].toLowerCase().includes('step') && !lines[0].match(/^\d+[\.\:]/)) {
          description += " " + (lines.shift() || "");
        }
      }
    }

    // Process the rest of the content as steps
    lines.forEach(line => {
      // Patterns to match step titles
      const stepMatch = line.match(/^(?:step\s*(\d+)|(\d+))[\.\:\)]?\s*(.*)/i);
      const timeMatch = line.match(/(?:time|duration|estimated)[:\s]+(.*)/i);
      const keywordsMatch = line.match(/(?:keywords|tags)[:\s]+(.*)/i);

      if (stepMatch) {
        // Save previous step before starting a new one
        if (currentStep) {
          steps.push({ ...currentStep, order_index: stepIndex++ });
        }
        // Create new step
        currentStep = {
          title: (stepMatch[3] || `Step ${stepMatch[1] || stepMatch[2]}`).trim(),
          description: '', 
          estimated_time: '1-2 hours',
          keywords: [],
        };
        inDescriptionMode = true;
      } else if (timeMatch && currentStep) {
        currentStep.estimated_time = timeMatch[1].trim();
        inDescriptionMode = false;
      } else if (keywordsMatch && currentStep) {
        currentStep.keywords = keywordsMatch[1].split(',').map(k => k.trim()).filter(Boolean);
        inDescriptionMode = false;
      } else if (currentStep) {
        if (line.toLowerCase().includes('next step') || line.match(/step\s*\d+/i)) {
          // Likely transitioning to a new step, but format doesn't exactly match our pattern
          inDescriptionMode = false;
        } else if (inDescriptionMode) {
          // Append to the description when in description mode
          currentStep.description = (currentStep.description ? currentStep.description + ' ' : '') + line;
        }
      }
    });

    // Add the final step
    if (currentStep) {
      steps.push({ ...currentStep, order_index: stepIndex++ });
    }

    // Generate meaningful fallback if parsing fails
    if (steps.length === 0) {
      console.warn("Failed to parse steps, creating default roadmap");
      const defaultSteps = [
        { 
          title: 'Getting Started', 
          description: 'Begin your learning journey by understanding the foundational concepts.',
          order_index: 0, 
          estimated_time: '1-2 hours', 
          keywords: ['basics', 'fundamentals'] 
        },
        { 
          title: 'Building Skills', 
          description: 'Develop practical skills through hands-on exercises and projects.',
          order_index: 1, 
          estimated_time: '3-5 hours', 
          keywords: ['practice', 'skills'] 
        },
        { 
          title: 'Advanced Concepts', 
          description: 'Explore more complex topics to deepen your understanding.',
          order_index: 2, 
          estimated_time: '4-6 hours', 
          keywords: ['advanced', 'mastery'] 
        }
      ];
      
      return {
        title: title,
        description: description || "A structured learning path to help you build skills systematically.",
        steps: defaultSteps
      };
    }

    return { title, description, steps };
  } catch (error) {
    console.error("Error parsing Gemini response:", error);
    return {
      title: "Learning Roadmap",
      description: "A structured learning path to help you master new skills.",
      steps: [
        { 
          title: 'Getting Started', 
          description: 'Begin your learning journey with the basic foundations.',
          order_index: 0, 
          estimated_time: '1-2 hours', 
          keywords: ['basics', 'introduction'] 
        },
        { 
          title: 'Core Concepts', 
          description: 'Build your understanding with essential concepts and practices.',
          order_index: 1, 
          estimated_time: '2-3 hours', 
          keywords: ['fundamentals', 'concepts'] 
        },
        { 
          title: 'Practical Application', 
          description: 'Apply what you\'ve learned through hands-on exercises and projects.',
          order_index: 2, 
          estimated_time: '5-7 hours', 
          keywords: ['practical', 'application', 'projects'] 
        },
        {
          title: 'Advanced Topics',
          description: 'Explore more complex topics to deepen your expertise.',
          order_index: 3,
          estimated_time: '6-8 hours',
          keywords: ['advanced', 'mastery']
        }
      ]
    };
  }
}

// --- Edge Function Handler ---
serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // 1. Get preferences from the request body
    const { pathName, level, language, customPrompt } = await req.json();
    console.log('Received request:', { pathName, level, language });

    if (!pathName || !level || !language) {
      return new Response(JSON.stringify({ error: "Missing required parameters" }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400,
      });
    }

    if (!GEMINI_API_KEY) {
      // If API key is missing, return a mock response instead of failing
      console.warn("GEMINI_API_KEY is not set. Returning mock roadmap data.");
      const mockRoadmap = {
        title: `${pathName} - ${level.charAt(0).toUpperCase() + level.slice(1)} Learning Path`,
        description: `A comprehensive roadmap for learning ${pathName} at a ${level} level, tailored for ${language} speakers.`,
        steps: [
          {
            title: 'Understand the Fundamentals',
            description: `Get started with the basic concepts of ${pathName}. This step will build your foundation for more advanced topics.`,
            order_index: 0,
            estimated_time: '2-3 hours',
            keywords: ['basics', 'fundamentals', pathName.toLowerCase()]
          },
          {
            title: 'Core Principles and Practices',
            description: `Learn the essential principles and practices in ${pathName} that are crucial for any ${level} learner.`,
            order_index: 1,
            estimated_time: '4-5 hours',
            keywords: ['principles', 'practices', 'core concepts']
          },
          {
            title: 'Hands-on Project',
            description: `Apply your knowledge by working on a practical project that demonstrates your understanding of ${pathName}.`,
            order_index: 2,
            estimated_time: '6-8 hours',
            keywords: ['project', 'application', 'hands-on']
          },
          {
            title: 'Advanced Topics',
            description: `Dive deeper into more advanced topics in ${pathName} appropriate for your ${level} level.`,
            order_index: 3,
            estimated_time: '5-6 hours',
            keywords: ['advanced', 'deep dive', 'specialized']
          },
          {
            title: 'Review and Assessment',
            description: 'Consolidate your learning through review exercises and self-assessment to ensure you\'ve mastered the content.',
            order_index: 4,
            estimated_time: '2-3 hours',
            keywords: ['review', 'assessment', 'evaluation']
          }
        ]
      };
      return new Response(JSON.stringify(mockRoadmap), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }

    // 2. Improved prompt for better structured output
    const basePrompt = `Create a detailed learning roadmap for a user wanting to learn "${pathName}" at a "${level}" level. The user's preferred language is "${language}".

    Please structure your response in a clear format with:
    
    1. A concise title for the roadmap
    2. A brief description of the overall learning journey
    3. 5-7 well-defined learning steps
    
    For each step, include:
    - A descriptive title starting with "Step X:" or "X."
    - A detailed explanation (2-3 sentences) of what the learner will accomplish
    - Estimated time to complete (e.g., "2-3 hours", "1 week")
    - 2-3 relevant keywords separated by commas
    
    If possible, respond with your roadmap in this JSON format:
    \`\`\`json
    {
      "title": "Your Roadmap Title",
      "description": "Overall description of the learning journey",
      "steps": [
        {
          "title": "Step 1: Getting Started",
          "description": "Detailed explanation of this step...",
          "estimated_time": "2-3 hours",
          "keywords": ["keyword1", "keyword2"]
        },
        ...more steps...
      ]
    }
    \`\`\`
    
    If you can't provide JSON, please format your response clearly with step headers and estimated times.`;

    const finalPrompt = customPrompt 
      ? `${basePrompt}\n\nAdditional requirements from the user: ${customPrompt}` 
      : basePrompt;

    console.log("Sending prompt to Gemini");

    // 3. Call the Gemini API with improved error handling
    const geminiPayload = {
      contents: [
        { parts: [{ text: finalPrompt }] }
      ],
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 2048,
      }
    };

    let geminiRes;
    try {
      geminiRes = await fetch(GEMINI_API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(geminiPayload),
      });
    } catch (fetchError) {
      console.error("Network error when calling Gemini API:", fetchError);
      throw new Error("Failed to connect to Gemini API. Please try again later.");
    }

    if (!geminiRes.ok) {
      const errorBody = await geminiRes.text();
      console.error("Gemini API Error Response:", errorBody);
      
      // Return fallback content instead of failing
      const fallbackRoadmap = {
        title: `${pathName} Learning Roadmap`,
        description: `A structured approach to learning ${pathName} at the ${level} level.`,
        steps: [
          {
            title: 'Understanding the Basics',
            description: `Begin your journey by learning the fundamental concepts of ${pathName}.`,
            order_index: 0,
            estimated_time: '3-4 hours',
            keywords: ['fundamentals', 'basics', pathName.toLowerCase()]
          },
          {
            title: 'Core Principles',
            description: `Explore the essential principles that form the foundation of ${pathName}.`,
            order_index: 1,
            estimated_time: '4-5 hours',
            keywords: ['principles', 'core concepts']
          },
          {
            title: 'Practical Application',
            description: 'Apply what you\'ve learned through hands-on exercises and projects.',
            order_index: 2,
            estimated_time: '5-7 hours',
            keywords: ['practical', 'application', 'projects']
          },
          {
            title: 'Advanced Topics',
            description: `Deepen your knowledge with more complex aspects of ${pathName}.`,
            order_index: 3,
            estimated_time: '6-8 hours',
            keywords: ['advanced', 'complex']
          }
        ]
      };
      
      return new Response(JSON.stringify(fallbackRoadmap), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }

    const geminiData = await geminiRes.json();
    console.log("Received response from Gemini API");

    // 4. Extract and parse the response with better error handling
    const generatedText = geminiData?.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!generatedText) {
      console.error("Could not extract text from Gemini response:", geminiData);
      throw new Error("Failed to extract content from Gemini response.");
    }

    const structuredRoadmap = parseGeminiResponse(generatedText);
    console.log("Successfully parsed roadmap with", structuredRoadmap.steps.length, "steps");

    // 5. Return the structured roadmap
    return new Response(
      JSON.stringify(structuredRoadmap),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      },
    );
  } catch (error) {
    console.error("Error in Edge Function:", error);
    
    // Return a default roadmap instead of an error
    const errorRoadmap = {
      title: "Learning Roadmap",
      description: "A structured approach to building your skills step by step.",
      steps: [
        {
          title: 'Getting Started',
          description: 'Begin with the fundamental concepts and basic principles.',
          order_index: 0,
          estimated_time: '2-3 hours',
          keywords: ['basics', 'introduction']
        },
        {
          title: 'Building Core Skills',
          description: 'Develop essential skills through guided practice and examples.',
          order_index: 1,
          estimated_time: '4-5 hours',
          keywords: ['skills', 'practice']
        },
        {
          title: 'Practical Application',
          description: 'Apply what you\'ve learned through hands-on exercises and projects.',
          order_index: 2,
          estimated_time: '5-7 hours',
          keywords: ['practical', 'application', 'projects']
        },
        {
          title: 'Advanced Concepts',
          description: 'Explore more complex topics to deepen your expertise.',
          order_index: 3,
          estimated_time: '6-8 hours',
          keywords: ['advanced', 'mastery']
        }
      ]
    };
    
    return new Response(JSON.stringify(errorRoadmap), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });
  }
}); 